# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
ggplot(sgroup, aes(x=reorder(instance_name), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
source("multiplot.R")
library(dplyr)
###########################
# READ DATA ###############
###########################
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
ggplot(sgroup, aes(x=reorder(instance_name, value), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
source("multiplot.R")
library(dplyr)
###########################
# READ DATA ###############
###########################
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
source("multiplot.R")
library(dplyr)
###########################
# READ DATA ###############
###########################
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
sgroup$size <- sizes
sizes <- c(17, 53, 34, 39, 48, 56, 65, 48)
sgroup$size <- sizes
View(sgroup)
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), 3)
sizes
rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
# Add sizes
sgroup$size <- sizes
View(sgroup)
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_points(alpha=0.5) +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_point(alpha=0.5) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_point(alpha=0.5, size=4) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_curve(alpha=0.5, size=4) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_path(alpha=0.5, size=4) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_line(alpha=0.5, size=4) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_line(alpha=0.5, size=1, fill=constraint_type) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=time, color=constraints_type)) + geom_line(alpha=0.5, size=1, fill=constraints_type) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_line(alpha=0.5, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.5, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.5, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal()
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_color_brewer()
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer()
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="spectral")
?scale_fill_brewer
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Spectral")
RColorBrewer::display.brewer.all()
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
t.test(subset(sgroup, constraints_type=="fcg")$time, subset(sgroup, constraints_type=="mtz")$time)
shapiro.test(subset(sgroup, constraints_type=="fcg")$time)
qqplot(subset(sgroup, constraints_type=="fcg")$time)
qqplot(subset(sgroup, constraints_type=="fcg")$time, rnorm(10))
shapiro.test(subset(sgroup, constraints_type=="claus")$time)
hist(subset(sgroup, constraints_type=="claus")$time)
t.test(subset(sgroup, constraints_type=="fcg")$time, subset(sgroup, constraints_type=="claus")$time)
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
source("multiplot.R")
library(dplyr)
###########################
# READ DATA ###############
###########################
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
# Add sizes
sgroup$size <- sizes
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
source("multiplot.R")
library(dplyr)
###########################
# READ DATA ###############
###########################
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
# Add sizes
sgroup$size <- sizes
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
View(sgroup)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
source("multiplot.R")
library(dplyr)
###########################
# READ DATA ###############
###########################
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
# Add sizes
sgroup$size <- sizes
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
View(sgroup)
# Create table for heuristics
heu <- subset(solutions, constraints_type=="mtz") %>%
dplyr::group_by(instance_name, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
library(dplyr)
###########################
# READ DATA ###############
###########################
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- solutions %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
# Add sizes
sgroup$size <- sizes
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
# Create table for heuristics
heu <- subset(solutions, constraints_type=="mtz") %>%
dplyr::group_by(instance_name, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
library(dplyr)
###########################
# READ DATA ###############
###########################
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- subset(solutions, hot_start=="none") %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
# Add sizes
sgroup$size <- sizes
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
# Create table for heuristics
heu <- subset(solutions, constraints_type=="mtz") %>%
dplyr::group_by(instance_name, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
View(heu)
ggplot(heu, aes(x=hot_start, y=time, fill=hot_start, color=hot_start)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by type of hot start", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(hot_start) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
t.test(subset(heu, hot_start=="none")$time, subset(heu, hot_start=="random")$time)
# Tables
res <- heu %>% dplyr::group_by(hot_start) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
library(dplyr)
###########################
# READ DATA ###############
###########################
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- subset(solutions, hot_start=="none") %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
# Add sizes
sgroup$size <- sizes
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
# Create table for heuristics
heu <- subset(solutions, constraints_type=="mtz") %>%
dplyr::group_by(instance_name, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
ggplot(heu, aes(x=hot_start, y=time, fill=hot_start, color=hot_start)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by type of hot start", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- heu %>% dplyr::group_by(hot_start) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
rm(list=ls(all=TRUE))
library(plyr)
library(tidyr)
library(ggplot2)
library(sqldf)
library(readr)
library(xtable)
library(gtools)
library(dplyr)
###########################
# READ DATA ###############
###########################
sizes <- rep(c(17, 53, 34, 39, 48, 56, 65, 48), each=3)
solutions <- read_csv("~/combinatorial-optimization-ulb/solutions/solutions.csv",
col_types = cols(random_seed = col_skip(),
size = col_skip()))
solutions <- subset(solutions, !instance_name %in% c("8.atsp", "9.atsp"))
# Clean name
solutions$instance_name <- gsub(".atsp", "", solutions$instance_name)
# Group data by name
sgroup <- subset(solutions, hot_start=="none") %>%
dplyr::group_by(instance_name, constraints_type, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
# Add sizes
sgroup$size <- sizes
ggplot(sgroup, aes(x=reorder(instance_name, as.numeric(instance_name)), y=time, fill=constraints_type)) + geom_col(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent")
ggplot(sgroup, aes(x=constraints_type, y=time, fill=constraints_type, color=constraints_type)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by constraint type", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
ggplot(sgroup %>% dplyr::group_by(size, constraints_type) %>% dplyr::summarise(time=mean(time)), aes(x=size, y=time, fill=constraints_type, color=constraints_type)) + geom_area(alpha=0.3, size=1) +
labs(title ="Execution time as function of instance size", x = "Instance size", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- sgroup %>% dplyr::group_by(constraints_type) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
# Create table for heuristics
heu <- subset(solutions, constraints_type=="mtz") %>%
dplyr::group_by(instance_name, hot_start, solution_value) %>%
dplyr::summarise(time=median(exec_time)) %>%
arrange(as.numeric(instance_name))
ggplot(heu, aes(x=hot_start, y=time, fill=hot_start, color=hot_start)) + geom_boxplot(alpha=0.5, position="dodge") +
labs(title ="Execution time, divided by type of hot start", x = "Instance number", y = "Execution time [sec]") +
theme_minimal() + scale_fill_brewer(palette="Accent") + scale_color_brewer(palette="Accent")
# Tables
res <- heu %>% dplyr::group_by(hot_start) %>% dplyr::summarize(min=min(time), mean=mean(time), median=median(time), max=max(time), sd=sd(time))
xtable(res,display = c("s", "f", "f", "f", "f", "f", "f"))
t.test(subset(heu, hot_start=="none")$time, subset(heu, hot_start=="random")$time)
t.test(subset(solutions, hot_start=="none")$exec_time, subset(solutions, hot_start=="random")$exec_time)
t.test(subset(solutions, hot_start=="none" & constraints_type=="mitz")$exec_time, subset(solutions, hot_start=="random")$exec_time)
t.test(subset(solutions, hot_start=="none" & constraints_type=="mtz")$exec_time, subset(solutions, hot_start=="random")$exec_time)
shapiro.test(subset(solutions, hot_start=="none" & constraints_type=="mtz")$exec_time)
hist(subset(solutions, hot_start=="none" & constraints_type=="mtz")$exec_time)
hist(log(1+subset(solutions, hot_start=="none" & constraints_type=="mtz")$exec_time))
hist(log(1+subset(solutions, hot_start=="none" & constraints_type=="mtz")$exec_time), breaks = 40)
wilcox.test(subset(solutions, hot_start=="none" & constraints_type=="mtz")$exec_time, subset(solutions, hot_start=="random")$exec_time)
